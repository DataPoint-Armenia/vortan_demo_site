{"version":3,"sources":["components/Results.jsx","components/Params.jsx","components/InputForm.jsx","components/Header.jsx","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Results","results","React","useContext","ResultsContext","Table","striped","bordered","hover","map","result","index","term","distance","score","ParamsContext","createContext","lang","Params","useState","setLang","Form","Label","className","onChange","event","console","log","target","value","Check","inline","defaultChecked","label","type","name","id","Provider","InputForm","input","getResults","setResults","alertVariant","setAlertVariant","alertText","setAlertText","onSubmit","preventDefault","inputDict","fetch","method","headers","body","JSON","stringify","then","response","json","x","suggest","catch","error","Group","Control","placeholder","bind","Text","Container","fluid","Row","Col","Button","variant","size","Alert","Header","style","Navbar","bg","Brand","Main","App","Helmet","charSet","http-equiv","content","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df9b0c06.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport { ResultsContext } from \"./InputForm\";\n\nexport default function Results() {\n    const { results } = React.useContext(ResultsContext)\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Suggest</th>\n                    <th>Distance</th>\n                    <th>Score</th>\n                </tr>\n            </thead>\n            <tbody>\n            {results.map((result, index) => (\n                <tr key={index}>\n                    <td>{result.term}</td>\n                    <td>{result.distance}</td>\n                    <td>{result.score}</td>\n                </tr>\n            ))}\n            </tbody>\n        </Table>\n    )\n}\n","import React, { useEffect, useState } from \"react\";\nimport Form from 'react-bootstrap/Form';\n\nimport InputForm from \"./InputForm\"\n\nexport const ParamsContext = React.createContext({ lang: \"hy\"})\n\nexport default function Params() {\n    const [lang, setLang] = React.useState(\"hy\");\n\n    const handleRadio = (event) => {\n        console.log(event.target.value)\n        setLang(event.target.value);\n    }\n\n    const style = {\n        marginBottom: \"0.5em\",\n    };\n    return (\n        <>\n            <Form.Label>Params</Form.Label>\n            <div key='inline-radio' className=\"mb-2\" onChange={handleRadio}>\n                <Form.Check inline defaultChecked\n                    label=\"Eastern\"\n                    value=\"hy\"\n                    type='radio'\n                    name=\"lang_group\"\n                    id={`inline-radio-1`} />\n                <Form.Check inline \n                    label=\"Western\"\n                    value=\"hyw\"\n                    type='radio'\n                    name=\"lang_group\"\n                    id={`inline-radio-2`} />\n            </div>\n            <ParamsContext.Provider value={{lang}}>\n                <InputForm />\n            </ ParamsContext.Provider>\n        </>\n    )\n}\n","import React from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Alert from 'react-bootstrap/Alert';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport Results from \"./Results\"\nimport { ParamsContext } from \"./Params\";\n\nexport const ResultsContext = React.createContext({ results: []})\n\nconst InputForm = () => {\n    const [input, getResults] = React.useState(\"\")\n    const [results, setResults] = React.useState([])\n    const [alertVariant, setAlertVariant] = React.useState(\"secondary\");\n    const [alertText, setAlertText] = React.useState(\"Status\");\n    const { lang } = React.useContext(ParamsContext)\n\n    const handleInput = event  => {\n        event.preventDefault();\n        getResults(event.target.value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const inputDict = {\n          \"word\": input\n        }\n        \n        console.log(lang)\n        setAlertVariant(\"primary\")\n        setAlertText(\"Loading...\")\n        fetch(\"https://vortan-api.herokuapp.com/suggest?lang=\" + lang, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json; charset=UTF-8\" },\n            body: JSON.stringify(inputDict)\n        }).then(response => {\n            response.json().then((x) => {\n                setResults(x.suggest)\n            });\n            setAlertVariant(\"success\")\n            setAlertText(\"Success\")\n        }).catch((error) => {\n            console.error('Error:', error);\n            setAlertVariant(\"danger\")\n            setAlertText(\"Error\")\n        });\n    }\n\n    return (\n        <div>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group>\n                    <Form.Label>Input Term</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"տպրոց\" onChange={handleInput.bind(this)} />\n                    <Form.Text className=\"text-muted\">\n                        Only supports single words for now\n                    </Form.Text>\n                </Form.Group>\n                <Container fluid>\n                    <Row >\n                        <Col>\n                            <Button variant=\"primary\" type=\"submit\" size=\"lg\">\n                                Submit\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Alert variant={alertVariant}>\n                                {alertText}\n                            </Alert>\n                        </Col>\n                    </Row>\n                </Container>\n            </Form>\n            <ResultsContext.Provider value={{results}}>\n                <Results />\n            </ ResultsContext.Provider>\n        </div>\n    );\n};\n\nexport default InputForm;\n","import React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst Header = () => {\n    const style = {\n      \"marginBottom\": \"1em\",\n    };\n    return (\n        <div style={style}>\n            <Navbar bg=\"light\">\n                <Navbar.Brand>Vortan Spellcheck Demo</Navbar.Brand>\n            </Navbar>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\nimport InputForm from \"./InputForm\"\nimport Params from \"./Params\"\nimport Header from \"./Header\";\nimport Alert from 'react-bootstrap/Alert';\n\nconst Main = () => {\n    const style = {\n      \"margin\": \"1em\",\n      \"maxWidth\": \"400px\",\n    };\n    return (\n        <div style={style}>\n            <Header />\n            <Alert variant=\"primary\">\n                The first request might take much longer than subsequent ones because it triggers\n                the backend to wake up from hibernation.\n            </Alert>\n            <Params />\n        </div>\n    );\n};\n\nexport default Main;\n","import './App.css';\nimport {Helmet} from \"react-helmet\";\n\nimport Main from \"./components/Main\";\n\nfunction App() {\n    return (\n    <>\n        <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Vortan Demo</title>\n            <meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\" />\n        </Helmet>\n        <Main />\n      </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}